data "aws_caller_identity" "current" {}

locals {
  account_id = data.aws_caller_identity.current.account_id
  region     = var.region # e.g., "ap-southeast-2"
}

data "aws_iam_policy_document" "sagemaker_team_kms" {
  # 1) Root account has full admin on the key
  statement {
    sid     = "EnableIAMUserPermissions"
    effect  = "Allow"
    principals { type = "AWS" identifiers = ["arn:aws:iam::${local.account_id}:root"] }
    actions   = ["kms:*"]
    resources = ["*"]
  }

  # 2) Allow any principal in THIS account to USE the key via Secrets Manager / SSM
  statement {
    sid     = "AllowUseFromThisAccountViaSMandSSM"
    effect  = "Allow"
    principals { type = "AWS" identifiers = ["*"] }

    actions = [
      "kms:Encrypt",
      "kms:Decrypt",
      "kms:ReEncrypt*",
      "kms:GenerateDataKey*",
      "kms:DescribeKey"
    ]
    resources = ["*"]

    # AND conditions
    condition {
      test     = "StringEquals"
      variable = "kms:CallerAccount"
      values   = [local.account_id]
    }
    condition {
      test     = "StringEquals"
      variable = "kms:ViaService"
      values = [
        "secretsmanager.${local.region}.amazonaws.com",
        "ssm.${local.region}.amazonaws.com"
      ]
    }
  }

  # 3) Allow those same callers to create GRANTS when the grant is for an AWS resource
  statement {
    sid     = "AllowAttachmentOfPersistentResources"
    effect  = "Allow"
    principals { type = "AWS" identifiers = ["*"] }

    actions = [
      "kms:CreateGrant",
      "kms:ListGrants",
      "kms:RevokeGrant"
    ]
    resources = ["*"]

    condition {
      test     = "Bool"
      variable = "kms:GrantIsForAWSResource"
      values   = ["true"]
    }
    condition {
      test     = "StringEquals"
      variable = "kms:CallerAccount"
      values   = [local.account_id]
    }
    condition {
      test     = "StringEquals"
      variable = "kms:ViaService"
      values = [
        "secretsmanager.${local.region}.amazonaws.com",
        "ssm.${local.region}.amazonaws.com"
      ]
    }
  }
}
