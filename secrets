import boto3
from botocore.exceptions import ClientError, NoCredentialsError, EndpointConnectionError

def fetch_secret_status(secret_id: str, region_name: str | None = None) -> dict:
    """
    Attempts to fetch a secret to verify access, but NEVER returns the secret value.
    Returns only a status code and non-sensitive metadata suitable for screenshots.
    """
    client = boto3.client("secretsmanager", region_name=region_name)

    try:
        resp = client.get_secret_value(SecretId=secret_id)

        # Sanitize: remove any fields that could contain the secret
        resp.pop("SecretString", None)
        resp.pop("SecretBinary", None)

        meta = resp.get("ResponseMetadata", {})
        status = meta.get("HTTPStatusCode", 200)

        # Keep only innocuous metadata
        safe = {
            "ok": True,
            "status": status,              # 200 means success
            "secret_id": secret_id,
            "arn": resp.get("ARN"),
            "name": resp.get("Name"),
            "version_id": resp.get("VersionId"),
        }

        # CreatedDate can be a datetime; stringify if present
        if "CreatedDate" in resp and hasattr(resp["CreatedDate"], "isoformat"):
            safe["created"] = resp["CreatedDate"].isoformat()

        return safe

    except ClientError as e:
        # Typical AWS errors include AccessDeniedException, ResourceNotFoundException, etc.
        err = e.response.get("Error", {})
        http = e.response.get("ResponseMetadata", {}).get("HTTPStatusCode", 400)
        return {
            "ok": False,
            "status": http,
            "error": err.get("Code"),
            "message": err.get("Message"),
            "secret_id": secret_id,
        }
    except (NoCredentialsError, EndpointConnectionError) as e:
        return {
            "ok": False,
            "status": 0,  # local/connection issue
            "error": e.__class__.__name__,
            "message": str(e),
            "secret_id": secret_id,
        }

# Example usage (won't print any secret value):
if __name__ == "__main__":
    result = fetch_secret_status("my/secret/name", region_name="ap-south-1")
    print(result)   # safe to screenshot